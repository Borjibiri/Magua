<!DOCTYPE html>
<html lang="es">
	<head>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		{% block title %}
			<title>Order Page</title>
		{% endblock %}
	</head>
</html>

{% block stylesheets %}
	{{ encore_entry_link_tags('app') }}
	<link rel="stylesheet" href="{{ asset('styles/app.css') }}">
{% endblock %}

{% block header %}
	<header class="bg-blue-600 shadow-md p-6">
		<div class="flex items-center justify-between">
			<h1 class="text-2xl font-semibold text-white">Welcome to your Order</h1>
			<nav>
				<ul class="flex items-center space-x-6">
					<li>
						<a href="{{ path('app_logout') }}" class="logout-button text-white bg-red-500 hover:bg-red-600 px-4 py-2 rounded-md transition">Log out</a>
					</li>
					<li>
						<a href="{{ path('app_main') }}" class="logout-button text-white bg-red-500 hover:bg-red-600 px-4 py-2 rounded-md transition">Back to profile</a>
					</li>
				</ul>
			</nav>
		</div>
	</header>
{% endblock %}

{% block body %}
	<div
		class="main-content flex justify-between gap-8 p-8">
		<!-- Product Section -->
		<div class="product-container grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 w-3/4">
			{% for product in products %}
				<div class="product-card bg-white border border-gray-200 rounded-lg shadow-md overflow-hidden">
					<a href="#" class="block">
						<img class="w-full h-48 object-cover" src="https://www.elajonegroherbolarios.com/images/productos/11179/ajonegro2zKcr.jpg" alt="Imagen del producto"/>
					</a>
					<div class="product-footer p-4">
						<h5 class="text-xl font-semibold mb-2">{{ product.name }}</h5>
						<p class="text-gray-600 text-sm mb-4">{{ product.description }}</p>
						<div class="mb-4">
							<span class="text-lg font-semibold text-gray-800 product_{{ product.id }}_price">{{ product.price }}‚Ç¨</span>
						</div>
						<div class="flex items-center justify-between">
							<select class="quantity-select border border-gray-300 rounded-md px-2 py-1 text-sm">
								<option value="1">1</option>
								<option value="2">2</option>
								<option value="3">3</option>
								<option value="4">4</option>
								<option value="5">5</option>
								<option value="6">6</option>
								<option value="7">7</option>
								<option value="8">8</option>
								<option value="9">9</option>
								<option value="10">10</option>
							</select>
							<button class="add-to-cart bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-md transition" id="{{ product.id }}">Add to Cart</button>
						</div>
					</div>
				</div>
			{% endfor %}
		</div>

		<!-- Cart Section -->
		<div class="cart bg-gray-100 p-6 rounded-lg w-1/4 shadow-xl border border-gray-300">
			<h3 class="text-xl font-semibold mb-4">Your Cart</h3>

<div>
<div class="flex items-center pb-6">
<h2 class="pr-6 text-lg font-bold">Uds</h2>
<h2 class="pr-14 text-lg font-bold">Product</h2>
<h2 class="text-lg font-bold">Price</h2>
</div>
			<div id="cart-items-list"></div>
			<div class="flex justify-between items-center pt-6">
<p class="text-gray-700 mb-4">Items: 0</p>
<p class="text-gray-700 mb-4 font-bold text-2xl">Total: 0 ‚Ç¨</p>
			</div>
</div>


			<button onclick="sendCart()" class="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md transition w-full">
				Proceed to Checkout
			</button>
		</div>
	</div>
{% endblock %}

{% block footer %}
			<footer class="bg-blue-500 text-right text-white text-base font-normal font-['Sora'] py-4 mt-auto">
				Magua¬© 2024
			</footer>
{% endblock %}

{% block javascripts %}
	<script>
		let cart = [];

const sendCart = async () => {
try {
const response = await fetch('http://127.0.0.1:8000/order/', {
method: 'POST',
headers: {
'Content-Type': 'application/json',
'X-Requested-With': 'XMLHttpRequest'
},
body: JSON.stringify(
{cart: cart}
)
});

if (! response.ok) {
throw new Error (`HTTP error! Status: ${
response.status
}`);
} else {
const routePaymentUrl = "{{ path('my_payment') }}";
console.log(routePaymentUrl);
window.location.href = routePaymentUrl;
}

const data = await response.json();
if (data.error) {
alert('Error: ' + data.error);
} else {
alert('Order created successfully! Order ID: ' + data.order_id);
}
} catch (error) {
alert('An error occurred while processing your request.');
}
};

document.querySelectorAll('.add-to-cart').forEach(button => {
button.addEventListener('click', function (e) {
let productId = e.target.id;
let priceSpan = document.querySelector (`.product_${productId}_price`).innerText;

const productName = this.closest('.product-card').querySelector('h5').innerText;
const price = parseFloat(priceSpan);
const quantity = parseInt(this.previousElementSibling.value);

const product = {
id: productId,
name: productName,
quantity: quantity,
price: price,
total: price * quantity
};

let existInCart = cart.some(prod => prod.id === product.id);
if (! existInCart) {
cart.push(product);
} else {
cart = cart.map((prod) => prod.id === product.id ? {
...prod,
quantity: prod.quantity + product.quantity,
total: prod.price * (prod.quantity + product.quantity)
} : prod);
} updateCart();
});
});

function updateCart() {
let totalItems = 0;
let totalAmount = 0;
let cartItemsHTML = '';

let cartItems = document.getElementById('cart-items-list');
cartItems.innerHTML = ''; // Clear cart items list

cart.forEach((item, index) => {
totalItems += item.quantity;
totalAmount += item.total;

cartItemsHTML += `
					<div class="cart-item flex justify-between items-center mb-4 bg-white shadow-lg p-4 rounded-lg" id="cart-item-${
item.id
}">
						<span class="text-gray-700 text-lg">${
item.quantity
} - ${
item.name
} - ${
item.total.toFixed(2)
} ‚Ç¨</span>
						<button class="remove-from-cart text-red-500 text-xl" style="cursor: pointer;" data-index="${index}">üóëÔ∏è</button>
					</div>`;
});

cartItems.innerHTML = cartItemsHTML


document.querySelector('.cart p:nth-of-type(1)').innerText = `Items: ${totalItems}`;
document.querySelector('.cart p:nth-of-type(2)').innerText = `Total: ${
totalAmount.toFixed(2)
} ‚Ç¨`;

document.querySelectorAll('.remove-from-cart').forEach(button => {
button.addEventListener('click', function () {
const index = parseInt(this.getAttribute('data-index'));
cart.splice(index, 1); // Remove item from cart
updateCart(); // Update the cart
});
});
}
	</script>
{% endblock %}

<style>
	/* Custom styles for cart icon */
	.remove-from-cart {
		color: red;
		font-size: 20px;
		cursor: pointer;
		transition: color 0.3s ease;
	}

	.remove-from-cart:hover {
		color: darkred;
	}
</style>
